//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class SwigLoggerBase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SwigLoggerBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigLoggerBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigLoggerBase() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NodeosSwigModulePINVOKE.delete_SwigLoggerBase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void OnDeepMindVersion(string name, uint major, uint minor) {
    if (SwigDerivedClassHasMethod("OnDeepMindVersion", swigMethodTypes0)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnDeepMindVersionSwigExplicitSwigLoggerBase(swigCPtr, name, major, minor); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnDeepMindVersion(swigCPtr, name, major, minor);
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnAbidumpStart(uint block_num, ulong global_sequence_num) {
    if (SwigDerivedClassHasMethod("OnAbidumpStart", swigMethodTypes1)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnAbidumpStartSwigExplicitSwigLoggerBase(swigCPtr, block_num, global_sequence_num); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnAbidumpStart(swigCPtr, block_num, global_sequence_num);
  }

  public virtual void OnAbidumpAbi(ulong name, SwigDataWrapper abi_data) {
    if (SwigDerivedClassHasMethod("OnAbidumpAbi", swigMethodTypes2)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnAbidumpAbiSwigExplicitSwigLoggerBase(swigCPtr, name, SwigDataWrapper.getCPtr(abi_data)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnAbidumpAbi(swigCPtr, name, SwigDataWrapper.getCPtr(abi_data));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnAbidumpEnd() {
    if (SwigDerivedClassHasMethod("OnAbidumpEnd", swigMethodTypes3)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnAbidumpEndSwigExplicitSwigLoggerBase(swigCPtr); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnAbidumpEnd(swigCPtr);
  }

  public virtual void OnStartBlock(uint start_block) {
    if (SwigDerivedClassHasMethod("OnStartBlock", swigMethodTypes4)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnStartBlockSwigExplicitSwigLoggerBase(swigCPtr, start_block); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnStartBlock(swigCPtr, start_block);
  }

  public virtual void OnAcceptedBlock(uint num, SwigDataWrapper blk) {
    if (SwigDerivedClassHasMethod("OnAcceptedBlock", swigMethodTypes5)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnAcceptedBlockSwigExplicitSwigLoggerBase(swigCPtr, num, SwigDataWrapper.getCPtr(blk)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnAcceptedBlock(swigCPtr, num, SwigDataWrapper.getCPtr(blk));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnSwitchForks(SwigDataWrapper from_id, SwigDataWrapper to_id) {
    if (SwigDerivedClassHasMethod("OnSwitchForks", swigMethodTypes6)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnSwitchForksSwigExplicitSwigLoggerBase(swigCPtr, SwigDataWrapper.getCPtr(from_id), SwigDataWrapper.getCPtr(to_id)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnSwitchForks(swigCPtr, SwigDataWrapper.getCPtr(from_id), SwigDataWrapper.getCPtr(to_id));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnError(SwigDataWrapper id, SwigDataWrapper trx) {
    if (SwigDerivedClassHasMethod("OnError", swigMethodTypes7)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnErrorSwigExplicitSwigLoggerBase(swigCPtr, SwigDataWrapper.getCPtr(id), SwigDataWrapper.getCPtr(trx)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnError(swigCPtr, SwigDataWrapper.getCPtr(id), SwigDataWrapper.getCPtr(trx));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnOnblock(SwigDataWrapper id, SwigDataWrapper trx) {
    if (SwigDerivedClassHasMethod("OnOnblock", swigMethodTypes8)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnOnblockSwigExplicitSwigLoggerBase(swigCPtr, SwigDataWrapper.getCPtr(id), SwigDataWrapper.getCPtr(trx)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnOnblock(swigCPtr, SwigDataWrapper.getCPtr(id), SwigDataWrapper.getCPtr(trx));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnAppliedTransaction(uint block_num, SwigDataWrapper traces) {
    if (SwigDerivedClassHasMethod("OnAppliedTransaction", swigMethodTypes9)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnAppliedTransactionSwigExplicitSwigLoggerBase(swigCPtr, block_num, SwigDataWrapper.getCPtr(traces)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnAppliedTransaction(swigCPtr, block_num, SwigDataWrapper.getCPtr(traces));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnAddRamCorrection(uint action_id, long correction_id, string event_id, ulong payer, ulong delta) {
    if (SwigDerivedClassHasMethod("OnAddRamCorrection", swigMethodTypes10)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnAddRamCorrectionSwigExplicitSwigLoggerBase(swigCPtr, action_id, correction_id, event_id, payer, delta); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnAddRamCorrection(swigCPtr, action_id, correction_id, event_id, payer, delta);
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnInputAction(uint action_id) {
    if (SwigDerivedClassHasMethod("OnInputAction", swigMethodTypes11)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnInputActionSwigExplicitSwigLoggerBase(swigCPtr, action_id); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnInputAction(swigCPtr, action_id);
  }

  public virtual void OnRequireRecipient(uint action_id) {
    if (SwigDerivedClassHasMethod("OnRequireRecipient", swigMethodTypes12)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnRequireRecipientSwigExplicitSwigLoggerBase(swigCPtr, action_id); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnRequireRecipient(swigCPtr, action_id);
  }

  public virtual void OnSendInline(uint action_id) {
    if (SwigDerivedClassHasMethod("OnSendInline", swigMethodTypes13)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnSendInlineSwigExplicitSwigLoggerBase(swigCPtr, action_id); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnSendInline(swigCPtr, action_id);
  }

  public virtual void OnSendContextFreeInline(uint action_id) {
    if (SwigDerivedClassHasMethod("OnSendContextFreeInline", swigMethodTypes14)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnSendContextFreeInlineSwigExplicitSwigLoggerBase(swigCPtr, action_id); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnSendContextFreeInline(swigCPtr, action_id);
  }

  public virtual void OnCancelDeferred(byte qual, uint action_id, ulong sender, SwigDataWrapper sender_id, ulong payer, uint published, uint delay, uint expiration, SwigDataWrapper trx_id, SwigDataWrapper trx) {
    if (SwigDerivedClassHasMethod("OnCancelDeferred", swigMethodTypes15)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnCancelDeferredSwigExplicitSwigLoggerBase(swigCPtr, qual, action_id, sender, SwigDataWrapper.getCPtr(sender_id), payer, published, delay, expiration, SwigDataWrapper.getCPtr(trx_id), SwigDataWrapper.getCPtr(trx)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnCancelDeferred(swigCPtr, qual, action_id, sender, SwigDataWrapper.getCPtr(sender_id), payer, published, delay, expiration, SwigDataWrapper.getCPtr(trx_id), SwigDataWrapper.getCPtr(trx));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnSendDeferred(byte qual, uint action_id, ulong sender, SwigDataWrapper sender_id, ulong payer, uint published, uint delay, uint expiration, SwigDataWrapper trx_id, SwigDataWrapper trx) {
    if (SwigDerivedClassHasMethod("OnSendDeferred", swigMethodTypes16)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnSendDeferredSwigExplicitSwigLoggerBase(swigCPtr, qual, action_id, sender, SwigDataWrapper.getCPtr(sender_id), payer, published, delay, expiration, SwigDataWrapper.getCPtr(trx_id), SwigDataWrapper.getCPtr(trx)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnSendDeferred(swigCPtr, qual, action_id, sender, SwigDataWrapper.getCPtr(sender_id), payer, published, delay, expiration, SwigDataWrapper.getCPtr(trx_id), SwigDataWrapper.getCPtr(trx));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnCreateDeferred(byte qual, uint action_id, ulong sender, SwigDataWrapper sender_id, ulong payer, uint published, uint delay, uint expiration, SwigDataWrapper trx_id, SwigDataWrapper trx) {
    if (SwigDerivedClassHasMethod("OnCreateDeferred", swigMethodTypes17)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnCreateDeferredSwigExplicitSwigLoggerBase(swigCPtr, qual, action_id, sender, SwigDataWrapper.getCPtr(sender_id), payer, published, delay, expiration, SwigDataWrapper.getCPtr(trx_id), SwigDataWrapper.getCPtr(trx)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnCreateDeferred(swigCPtr, qual, action_id, sender, SwigDataWrapper.getCPtr(sender_id), payer, published, delay, expiration, SwigDataWrapper.getCPtr(trx_id), SwigDataWrapper.getCPtr(trx));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnFailDeferred(uint action_id) {
    if (SwigDerivedClassHasMethod("OnFailDeferred", swigMethodTypes18)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnFailDeferredSwigExplicitSwigLoggerBase(swigCPtr, action_id); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnFailDeferred(swigCPtr, action_id);
  }

  public virtual void OnCreateTable(uint action_id, ulong code, ulong scope, ulong table, ulong payer) {
    if (SwigDerivedClassHasMethod("OnCreateTable", swigMethodTypes19)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnCreateTableSwigExplicitSwigLoggerBase(swigCPtr, action_id, code, scope, table, payer); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnCreateTable(swigCPtr, action_id, code, scope, table, payer);
  }

  public virtual void OnRemoveTable(uint action_id, ulong code, ulong scope, ulong table, ulong payer) {
    if (SwigDerivedClassHasMethod("OnRemoveTable", swigMethodTypes20)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnRemoveTableSwigExplicitSwigLoggerBase(swigCPtr, action_id, code, scope, table, payer); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnRemoveTable(swigCPtr, action_id, code, scope, table, payer);
  }

  public virtual void OnDbStoreI64(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, SwigDataWrapper ndata) {
    if (SwigDerivedClassHasMethod("OnDbStoreI64", swigMethodTypes21)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnDbStoreI64SwigExplicitSwigLoggerBase(swigCPtr, action_id, payer, table_code, scope, table_name, primkey, SwigDataWrapper.getCPtr(ndata)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnDbStoreI64(swigCPtr, action_id, payer, table_code, scope, table_name, primkey, SwigDataWrapper.getCPtr(ndata));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnDbUpdateI64(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, SwigDataWrapper odata, SwigDataWrapper ndata) {
    if (SwigDerivedClassHasMethod("OnDbUpdateI64", swigMethodTypes22)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnDbUpdateI64SwigExplicitSwigLoggerBase(swigCPtr, action_id, payer, table_code, scope, table_name, primkey, SwigDataWrapper.getCPtr(odata), SwigDataWrapper.getCPtr(ndata)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnDbUpdateI64(swigCPtr, action_id, payer, table_code, scope, table_name, primkey, SwigDataWrapper.getCPtr(odata), SwigDataWrapper.getCPtr(ndata));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnDbRemoveI64(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, SwigDataWrapper odata) {
    if (SwigDerivedClassHasMethod("OnDbRemoveI64", swigMethodTypes23)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnDbRemoveI64SwigExplicitSwigLoggerBase(swigCPtr, action_id, payer, table_code, scope, table_name, primkey, SwigDataWrapper.getCPtr(odata)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnDbRemoveI64(swigCPtr, action_id, payer, table_code, scope, table_name, primkey, SwigDataWrapper.getCPtr(odata));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnRamEvent(uint action_id, string event_id, string family, string operation, string legacy_tag, ulong payer, ulong new_usage, long delta) {
    if (SwigDerivedClassHasMethod("OnRamEvent", swigMethodTypes24)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnRamEventSwigExplicitSwigLoggerBase(swigCPtr, action_id, event_id, family, operation, legacy_tag, payer, new_usage, delta); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnRamEvent(swigCPtr, action_id, event_id, family, operation, legacy_tag, payer, new_usage, delta);
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnCreatePermission(uint action_id, long permission_id, SwigDataWrapper data) {
    if (SwigDerivedClassHasMethod("OnCreatePermission", swigMethodTypes25)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnCreatePermissionSwigExplicitSwigLoggerBase(swigCPtr, action_id, permission_id, SwigDataWrapper.getCPtr(data)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnCreatePermission(swigCPtr, action_id, permission_id, SwigDataWrapper.getCPtr(data));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnModifyPermission(uint action_id, long permission_id, SwigDataWrapper opdata, SwigDataWrapper npdata) {
    if (SwigDerivedClassHasMethod("OnModifyPermission", swigMethodTypes26)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnModifyPermissionSwigExplicitSwigLoggerBase(swigCPtr, action_id, permission_id, SwigDataWrapper.getCPtr(opdata), SwigDataWrapper.getCPtr(npdata)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnModifyPermission(swigCPtr, action_id, permission_id, SwigDataWrapper.getCPtr(opdata), SwigDataWrapper.getCPtr(npdata));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnRemovePermission(uint action_id, long permission_id, SwigDataWrapper data) {
    if (SwigDerivedClassHasMethod("OnRemovePermission", swigMethodTypes27)) NodeosSwigModulePINVOKE.SwigLoggerBase_OnRemovePermissionSwigExplicitSwigLoggerBase(swigCPtr, action_id, permission_id, SwigDataWrapper.getCPtr(data)); else NodeosSwigModulePINVOKE.SwigLoggerBase_OnRemovePermission(swigCPtr, action_id, permission_id, SwigDataWrapper.getCPtr(data));
    if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public SwigLoggerBase() : this(NodeosSwigModulePINVOKE.new_SwigLoggerBase(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("OnDeepMindVersion", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateSwigLoggerBase_0(SwigDirectorMethodOnDeepMindVersion);
    if (SwigDerivedClassHasMethod("OnAbidumpStart", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateSwigLoggerBase_1(SwigDirectorMethodOnAbidumpStart);
    if (SwigDerivedClassHasMethod("OnAbidumpAbi", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateSwigLoggerBase_2(SwigDirectorMethodOnAbidumpAbi);
    if (SwigDerivedClassHasMethod("OnAbidumpEnd", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateSwigLoggerBase_3(SwigDirectorMethodOnAbidumpEnd);
    if (SwigDerivedClassHasMethod("OnStartBlock", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateSwigLoggerBase_4(SwigDirectorMethodOnStartBlock);
    if (SwigDerivedClassHasMethod("OnAcceptedBlock", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateSwigLoggerBase_5(SwigDirectorMethodOnAcceptedBlock);
    if (SwigDerivedClassHasMethod("OnSwitchForks", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateSwigLoggerBase_6(SwigDirectorMethodOnSwitchForks);
    if (SwigDerivedClassHasMethod("OnError", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateSwigLoggerBase_7(SwigDirectorMethodOnError);
    if (SwigDerivedClassHasMethod("OnOnblock", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateSwigLoggerBase_8(SwigDirectorMethodOnOnblock);
    if (SwigDerivedClassHasMethod("OnAppliedTransaction", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateSwigLoggerBase_9(SwigDirectorMethodOnAppliedTransaction);
    if (SwigDerivedClassHasMethod("OnAddRamCorrection", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateSwigLoggerBase_10(SwigDirectorMethodOnAddRamCorrection);
    if (SwigDerivedClassHasMethod("OnInputAction", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateSwigLoggerBase_11(SwigDirectorMethodOnInputAction);
    if (SwigDerivedClassHasMethod("OnRequireRecipient", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateSwigLoggerBase_12(SwigDirectorMethodOnRequireRecipient);
    if (SwigDerivedClassHasMethod("OnSendInline", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateSwigLoggerBase_13(SwigDirectorMethodOnSendInline);
    if (SwigDerivedClassHasMethod("OnSendContextFreeInline", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateSwigLoggerBase_14(SwigDirectorMethodOnSendContextFreeInline);
    if (SwigDerivedClassHasMethod("OnCancelDeferred", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateSwigLoggerBase_15(SwigDirectorMethodOnCancelDeferred);
    if (SwigDerivedClassHasMethod("OnSendDeferred", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateSwigLoggerBase_16(SwigDirectorMethodOnSendDeferred);
    if (SwigDerivedClassHasMethod("OnCreateDeferred", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateSwigLoggerBase_17(SwigDirectorMethodOnCreateDeferred);
    if (SwigDerivedClassHasMethod("OnFailDeferred", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateSwigLoggerBase_18(SwigDirectorMethodOnFailDeferred);
    if (SwigDerivedClassHasMethod("OnCreateTable", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateSwigLoggerBase_19(SwigDirectorMethodOnCreateTable);
    if (SwigDerivedClassHasMethod("OnRemoveTable", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateSwigLoggerBase_20(SwigDirectorMethodOnRemoveTable);
    if (SwigDerivedClassHasMethod("OnDbStoreI64", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateSwigLoggerBase_21(SwigDirectorMethodOnDbStoreI64);
    if (SwigDerivedClassHasMethod("OnDbUpdateI64", swigMethodTypes22))
      swigDelegate22 = new SwigDelegateSwigLoggerBase_22(SwigDirectorMethodOnDbUpdateI64);
    if (SwigDerivedClassHasMethod("OnDbRemoveI64", swigMethodTypes23))
      swigDelegate23 = new SwigDelegateSwigLoggerBase_23(SwigDirectorMethodOnDbRemoveI64);
    if (SwigDerivedClassHasMethod("OnRamEvent", swigMethodTypes24))
      swigDelegate24 = new SwigDelegateSwigLoggerBase_24(SwigDirectorMethodOnRamEvent);
    if (SwigDerivedClassHasMethod("OnCreatePermission", swigMethodTypes25))
      swigDelegate25 = new SwigDelegateSwigLoggerBase_25(SwigDirectorMethodOnCreatePermission);
    if (SwigDerivedClassHasMethod("OnModifyPermission", swigMethodTypes26))
      swigDelegate26 = new SwigDelegateSwigLoggerBase_26(SwigDirectorMethodOnModifyPermission);
    if (SwigDerivedClassHasMethod("OnRemovePermission", swigMethodTypes27))
      swigDelegate27 = new SwigDelegateSwigLoggerBase_27(SwigDirectorMethodOnRemovePermission);
    NodeosSwigModulePINVOKE.SwigLoggerBase_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22, swigDelegate23, swigDelegate24, swigDelegate25, swigDelegate26, swigDelegate27);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(SwigLoggerBase));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodOnDeepMindVersion(string name, uint major, uint minor) {
    OnDeepMindVersion(name, major, minor);
  }

  private void SwigDirectorMethodOnAbidumpStart(uint block_num, ulong global_sequence_num) {
    OnAbidumpStart(block_num, global_sequence_num);
  }

  private void SwigDirectorMethodOnAbidumpAbi(ulong name, global::System.IntPtr abi_data) {
    OnAbidumpAbi(name, new SwigDataWrapper(abi_data, true));
  }

  private void SwigDirectorMethodOnAbidumpEnd() {
    OnAbidumpEnd();
  }

  private void SwigDirectorMethodOnStartBlock(uint start_block) {
    OnStartBlock(start_block);
  }

  private void SwigDirectorMethodOnAcceptedBlock(uint num, global::System.IntPtr blk) {
    OnAcceptedBlock(num, new SwigDataWrapper(blk, true));
  }

  private void SwigDirectorMethodOnSwitchForks(global::System.IntPtr from_id, global::System.IntPtr to_id) {
    OnSwitchForks(new SwigDataWrapper(from_id, true), new SwigDataWrapper(to_id, true));
  }

  private void SwigDirectorMethodOnError(global::System.IntPtr id, global::System.IntPtr trx) {
    OnError(new SwigDataWrapper(id, true), new SwigDataWrapper(trx, true));
  }

  private void SwigDirectorMethodOnOnblock(global::System.IntPtr id, global::System.IntPtr trx) {
    OnOnblock(new SwigDataWrapper(id, true), new SwigDataWrapper(trx, true));
  }

  private void SwigDirectorMethodOnAppliedTransaction(uint block_num, global::System.IntPtr traces) {
    OnAppliedTransaction(block_num, new SwigDataWrapper(traces, true));
  }

  private void SwigDirectorMethodOnAddRamCorrection(uint action_id, long correction_id, string event_id, ulong payer, ulong delta) {
    OnAddRamCorrection(action_id, correction_id, event_id, payer, delta);
  }

  private void SwigDirectorMethodOnInputAction(uint action_id) {
    OnInputAction(action_id);
  }

  private void SwigDirectorMethodOnRequireRecipient(uint action_id) {
    OnRequireRecipient(action_id);
  }

  private void SwigDirectorMethodOnSendInline(uint action_id) {
    OnSendInline(action_id);
  }

  private void SwigDirectorMethodOnSendContextFreeInline(uint action_id) {
    OnSendContextFreeInline(action_id);
  }

  private void SwigDirectorMethodOnCancelDeferred(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx) {
    OnCancelDeferred(qual, action_id, sender, new SwigDataWrapper(sender_id, true), payer, published, delay, expiration, new SwigDataWrapper(trx_id, true), new SwigDataWrapper(trx, true));
  }

  private void SwigDirectorMethodOnSendDeferred(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx) {
    OnSendDeferred(qual, action_id, sender, new SwigDataWrapper(sender_id, true), payer, published, delay, expiration, new SwigDataWrapper(trx_id, true), new SwigDataWrapper(trx, true));
  }

  private void SwigDirectorMethodOnCreateDeferred(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx) {
    OnCreateDeferred(qual, action_id, sender, new SwigDataWrapper(sender_id, true), payer, published, delay, expiration, new SwigDataWrapper(trx_id, true), new SwigDataWrapper(trx, true));
  }

  private void SwigDirectorMethodOnFailDeferred(uint action_id) {
    OnFailDeferred(action_id);
  }

  private void SwigDirectorMethodOnCreateTable(uint action_id, ulong code, ulong scope, ulong table, ulong payer) {
    OnCreateTable(action_id, code, scope, table, payer);
  }

  private void SwigDirectorMethodOnRemoveTable(uint action_id, ulong code, ulong scope, ulong table, ulong payer) {
    OnRemoveTable(action_id, code, scope, table, payer);
  }

  private void SwigDirectorMethodOnDbStoreI64(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr ndata) {
    OnDbStoreI64(action_id, payer, table_code, scope, table_name, primkey, new SwigDataWrapper(ndata, true));
  }

  private void SwigDirectorMethodOnDbUpdateI64(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr odata, global::System.IntPtr ndata) {
    OnDbUpdateI64(action_id, payer, table_code, scope, table_name, primkey, new SwigDataWrapper(odata, true), new SwigDataWrapper(ndata, true));
  }

  private void SwigDirectorMethodOnDbRemoveI64(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr odata) {
    OnDbRemoveI64(action_id, payer, table_code, scope, table_name, primkey, new SwigDataWrapper(odata, true));
  }

  private void SwigDirectorMethodOnRamEvent(uint action_id, string event_id, string family, string operation, string legacy_tag, ulong payer, ulong new_usage, long delta) {
    OnRamEvent(action_id, event_id, family, operation, legacy_tag, payer, new_usage, delta);
  }

  private void SwigDirectorMethodOnCreatePermission(uint action_id, long permission_id, global::System.IntPtr data) {
    OnCreatePermission(action_id, permission_id, new SwigDataWrapper(data, true));
  }

  private void SwigDirectorMethodOnModifyPermission(uint action_id, long permission_id, global::System.IntPtr opdata, global::System.IntPtr npdata) {
    OnModifyPermission(action_id, permission_id, new SwigDataWrapper(opdata, true), new SwigDataWrapper(npdata, true));
  }

  private void SwigDirectorMethodOnRemovePermission(uint action_id, long permission_id, global::System.IntPtr data) {
    OnRemovePermission(action_id, permission_id, new SwigDataWrapper(data, true));
  }

  public delegate void SwigDelegateSwigLoggerBase_0(string name, uint major, uint minor);
  public delegate void SwigDelegateSwigLoggerBase_1(uint block_num, ulong global_sequence_num);
  public delegate void SwigDelegateSwigLoggerBase_2(ulong name, global::System.IntPtr abi_data);
  public delegate void SwigDelegateSwigLoggerBase_3();
  public delegate void SwigDelegateSwigLoggerBase_4(uint start_block);
  public delegate void SwigDelegateSwigLoggerBase_5(uint num, global::System.IntPtr blk);
  public delegate void SwigDelegateSwigLoggerBase_6(global::System.IntPtr from_id, global::System.IntPtr to_id);
  public delegate void SwigDelegateSwigLoggerBase_7(global::System.IntPtr id, global::System.IntPtr trx);
  public delegate void SwigDelegateSwigLoggerBase_8(global::System.IntPtr id, global::System.IntPtr trx);
  public delegate void SwigDelegateSwigLoggerBase_9(uint block_num, global::System.IntPtr traces);
  public delegate void SwigDelegateSwigLoggerBase_10(uint action_id, long correction_id, string event_id, ulong payer, ulong delta);
  public delegate void SwigDelegateSwigLoggerBase_11(uint action_id);
  public delegate void SwigDelegateSwigLoggerBase_12(uint action_id);
  public delegate void SwigDelegateSwigLoggerBase_13(uint action_id);
  public delegate void SwigDelegateSwigLoggerBase_14(uint action_id);
  public delegate void SwigDelegateSwigLoggerBase_15(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx);
  public delegate void SwigDelegateSwigLoggerBase_16(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx);
  public delegate void SwigDelegateSwigLoggerBase_17(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx);
  public delegate void SwigDelegateSwigLoggerBase_18(uint action_id);
  public delegate void SwigDelegateSwigLoggerBase_19(uint action_id, ulong code, ulong scope, ulong table, ulong payer);
  public delegate void SwigDelegateSwigLoggerBase_20(uint action_id, ulong code, ulong scope, ulong table, ulong payer);
  public delegate void SwigDelegateSwigLoggerBase_21(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr ndata);
  public delegate void SwigDelegateSwigLoggerBase_22(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr odata, global::System.IntPtr ndata);
  public delegate void SwigDelegateSwigLoggerBase_23(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr odata);
  public delegate void SwigDelegateSwigLoggerBase_24(uint action_id, string event_id, string family, string operation, string legacy_tag, ulong payer, ulong new_usage, long delta);
  public delegate void SwigDelegateSwigLoggerBase_25(uint action_id, long permission_id, global::System.IntPtr data);
  public delegate void SwigDelegateSwigLoggerBase_26(uint action_id, long permission_id, global::System.IntPtr opdata, global::System.IntPtr npdata);
  public delegate void SwigDelegateSwigLoggerBase_27(uint action_id, long permission_id, global::System.IntPtr data);

  private SwigDelegateSwigLoggerBase_0 swigDelegate0;
  private SwigDelegateSwigLoggerBase_1 swigDelegate1;
  private SwigDelegateSwigLoggerBase_2 swigDelegate2;
  private SwigDelegateSwigLoggerBase_3 swigDelegate3;
  private SwigDelegateSwigLoggerBase_4 swigDelegate4;
  private SwigDelegateSwigLoggerBase_5 swigDelegate5;
  private SwigDelegateSwigLoggerBase_6 swigDelegate6;
  private SwigDelegateSwigLoggerBase_7 swigDelegate7;
  private SwigDelegateSwigLoggerBase_8 swigDelegate8;
  private SwigDelegateSwigLoggerBase_9 swigDelegate9;
  private SwigDelegateSwigLoggerBase_10 swigDelegate10;
  private SwigDelegateSwigLoggerBase_11 swigDelegate11;
  private SwigDelegateSwigLoggerBase_12 swigDelegate12;
  private SwigDelegateSwigLoggerBase_13 swigDelegate13;
  private SwigDelegateSwigLoggerBase_14 swigDelegate14;
  private SwigDelegateSwigLoggerBase_15 swigDelegate15;
  private SwigDelegateSwigLoggerBase_16 swigDelegate16;
  private SwigDelegateSwigLoggerBase_17 swigDelegate17;
  private SwigDelegateSwigLoggerBase_18 swigDelegate18;
  private SwigDelegateSwigLoggerBase_19 swigDelegate19;
  private SwigDelegateSwigLoggerBase_20 swigDelegate20;
  private SwigDelegateSwigLoggerBase_21 swigDelegate21;
  private SwigDelegateSwigLoggerBase_22 swigDelegate22;
  private SwigDelegateSwigLoggerBase_23 swigDelegate23;
  private SwigDelegateSwigLoggerBase_24 swigDelegate24;
  private SwigDelegateSwigLoggerBase_25 swigDelegate25;
  private SwigDelegateSwigLoggerBase_26 swigDelegate26;
  private SwigDelegateSwigLoggerBase_27 swigDelegate27;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(string), typeof(uint), typeof(uint) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(uint), typeof(ulong) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(ulong), typeof(SwigDataWrapper) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(uint) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(uint), typeof(SwigDataWrapper) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(SwigDataWrapper), typeof(SwigDataWrapper) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(SwigDataWrapper), typeof(SwigDataWrapper) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(SwigDataWrapper), typeof(SwigDataWrapper) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(uint), typeof(SwigDataWrapper) };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(uint), typeof(long), typeof(string), typeof(ulong), typeof(ulong) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] { typeof(uint) };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(uint) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(uint) };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] { typeof(uint) };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] { typeof(byte), typeof(uint), typeof(ulong), typeof(SwigDataWrapper), typeof(ulong), typeof(uint), typeof(uint), typeof(uint), typeof(SwigDataWrapper), typeof(SwigDataWrapper) };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] { typeof(byte), typeof(uint), typeof(ulong), typeof(SwigDataWrapper), typeof(ulong), typeof(uint), typeof(uint), typeof(uint), typeof(SwigDataWrapper), typeof(SwigDataWrapper) };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(byte), typeof(uint), typeof(ulong), typeof(SwigDataWrapper), typeof(ulong), typeof(uint), typeof(uint), typeof(uint), typeof(SwigDataWrapper), typeof(SwigDataWrapper) };
  private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] { typeof(uint) };
  private static global::System.Type[] swigMethodTypes19 = new global::System.Type[] { typeof(uint), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong) };
  private static global::System.Type[] swigMethodTypes20 = new global::System.Type[] { typeof(uint), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong) };
  private static global::System.Type[] swigMethodTypes21 = new global::System.Type[] { typeof(uint), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong), typeof(SwigDataWrapper) };
  private static global::System.Type[] swigMethodTypes22 = new global::System.Type[] { typeof(uint), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong), typeof(SwigDataWrapper), typeof(SwigDataWrapper) };
  private static global::System.Type[] swigMethodTypes23 = new global::System.Type[] { typeof(uint), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong), typeof(SwigDataWrapper) };
  private static global::System.Type[] swigMethodTypes24 = new global::System.Type[] { typeof(uint), typeof(string), typeof(string), typeof(string), typeof(string), typeof(ulong), typeof(ulong), typeof(long) };
  private static global::System.Type[] swigMethodTypes25 = new global::System.Type[] { typeof(uint), typeof(long), typeof(SwigDataWrapper) };
  private static global::System.Type[] swigMethodTypes26 = new global::System.Type[] { typeof(uint), typeof(long), typeof(SwigDataWrapper), typeof(SwigDataWrapper) };
  private static global::System.Type[] swigMethodTypes27 = new global::System.Type[] { typeof(uint), typeof(long), typeof(SwigDataWrapper) };
}
