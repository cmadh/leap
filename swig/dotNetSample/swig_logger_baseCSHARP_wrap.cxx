/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_NodeosSwigLoggerModule(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_NodeosSwigLoggerModule(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_NodeosSwigLoggerModule(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


  #include "swig_logger_base.hpp"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "swig_logger_baseCSHARP_wrap.h"

SwigDirector_swig_logger_base::SwigDirector_swig_logger_base() : swig_logger_base(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_swig_logger_base::~SwigDirector_swig_logger_base() {
  
}


void SwigDirector_swig_logger_base::on_deep_mind_version(std::string const name, uint const major, uint const minor) {
  void * jname  ;
  void * jmajor  ;
  void * jminor  ;
  
  if (!swig_callbackon_deep_mind_version) {
    swig_logger_base::on_deep_mind_version(name,major,minor);
    return;
  } else {
    jname = (void *)new std::string((const std::string &)name); 
    jmajor = (void *)new uint((const uint &)major); 
    jminor = (void *)new uint((const uint &)minor); 
    swig_callbackon_deep_mind_version(jname, jmajor, jminor);
  }
}

void SwigDirector_swig_logger_base::on_abidump_start(uint32_t block_num, uint64_t global_sequence_num) {
  void * jblock_num  ;
  void * jglobal_sequence_num  ;
  
  if (!swig_callbackon_abidump_start) {
    swig_logger_base::on_abidump_start(block_num,global_sequence_num);
    return;
  } else {
    jblock_num = (void *)new uint32_t((const uint32_t &)block_num); 
    jglobal_sequence_num = (void *)new uint64_t((const uint64_t &)global_sequence_num); 
    swig_callbackon_abidump_start(jblock_num, jglobal_sequence_num);
  }
}

void SwigDirector_swig_logger_base::on_abidump_abi(uint64_t name, uint8_t abi_data[]) {
  void * jname  ;
  void * jabi_data  ;
  
  if (!swig_callbackon_abidump_abi) {
    swig_logger_base::on_abidump_abi(name,abi_data);
    return;
  } else {
    jname = (void *)new uint64_t((const uint64_t &)name); 
    jabi_data = (void *) abi_data; 
    swig_callbackon_abidump_abi(jname, jabi_data);
  }
}

void SwigDirector_swig_logger_base::on_abidump_end() {
  if (!swig_callbackon_abidump_end) {
    swig_logger_base::on_abidump_end();
    return;
  } else {
    swig_callbackon_abidump_end();
  }
}

void SwigDirector_swig_logger_base::on_start_block(uint32_t start_block) {
  void * jstart_block  ;
  
  if (!swig_callbackon_start_block) {
    swig_logger_base::on_start_block(start_block);
    return;
  } else {
    jstart_block = (void *)new uint32_t((const uint32_t &)start_block); 
    swig_callbackon_start_block(jstart_block);
  }
}

void SwigDirector_swig_logger_base::on_accepted_block(uint32_t num, uint8_t blk[]) {
  void * jnum  ;
  void * jblk  ;
  
  if (!swig_callbackon_accepted_block) {
    swig_logger_base::on_accepted_block(num,blk);
    return;
  } else {
    jnum = (void *)new uint32_t((const uint32_t &)num); 
    jblk = (void *) blk; 
    swig_callbackon_accepted_block(jnum, jblk);
  }
}

void SwigDirector_swig_logger_base::on_switch_forks(uint8_t from_id[32], uint8_t to_id[32]) {
  void * jfrom_id  ;
  void * jto_id  ;
  
  if (!swig_callbackon_switch_forks) {
    swig_logger_base::on_switch_forks(from_id,to_id);
    return;
  } else {
    jfrom_id = (void *) from_id; 
    jto_id = (void *) to_id; 
    swig_callbackon_switch_forks(jfrom_id, jto_id);
  }
}

void SwigDirector_swig_logger_base::on_error(uint8_t id[32], uint8_t trx[]) {
  void * jid  ;
  void * jtrx  ;
  
  if (!swig_callbackon_error) {
    swig_logger_base::on_error(id,trx);
    return;
  } else {
    jid = (void *) id; 
    jtrx = (void *) trx; 
    swig_callbackon_error(jid, jtrx);
  }
}

void SwigDirector_swig_logger_base::on_onblock(uint8_t id[32], uint8_t trx[]) {
  void * jid  ;
  void * jtrx  ;
  
  if (!swig_callbackon_onblock) {
    swig_logger_base::on_onblock(id,trx);
    return;
  } else {
    jid = (void *) id; 
    jtrx = (void *) trx; 
    swig_callbackon_onblock(jid, jtrx);
  }
}

void SwigDirector_swig_logger_base::on_applied_transaction(uint32_t i, uint8_t traces[]) {
  void * ji  ;
  void * jtraces  ;
  
  if (!swig_callbackon_applied_transaction) {
    swig_logger_base::on_applied_transaction(i,traces);
    return;
  } else {
    ji = (void *)new uint32_t((const uint32_t &)i); 
    jtraces = (void *) traces; 
    swig_callbackon_applied_transaction(ji, jtraces);
  }
}

void SwigDirector_swig_logger_base::on_add_ram_correction(uint32_t action_id, int64_t correction_id, std::string event_id, uint64_t payer, uint64_t delta) {
  void * jaction_id  ;
  void * jcorrection_id  ;
  void * jevent_id  ;
  void * jpayer  ;
  void * jdelta  ;
  
  if (!swig_callbackon_add_ram_correction) {
    swig_logger_base::on_add_ram_correction(action_id,correction_id,event_id,payer,delta);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    jcorrection_id = (void *)new int64_t((const int64_t &)correction_id); 
    jevent_id = (void *)new std::string((const std::string &)event_id); 
    jpayer = (void *)new uint64_t((const uint64_t &)payer); 
    jdelta = (void *)new uint64_t((const uint64_t &)delta); 
    swig_callbackon_add_ram_correction(jaction_id, jcorrection_id, jevent_id, jpayer, jdelta);
  }
}

void SwigDirector_swig_logger_base::on_input_action(uint32_t action_id) {
  void * jaction_id  ;
  
  if (!swig_callbackon_input_action) {
    swig_logger_base::on_input_action(action_id);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    swig_callbackon_input_action(jaction_id);
  }
}

void SwigDirector_swig_logger_base::on_require_recipient(uint32_t action_id) {
  void * jaction_id  ;
  
  if (!swig_callbackon_require_recipient) {
    swig_logger_base::on_require_recipient(action_id);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    swig_callbackon_require_recipient(jaction_id);
  }
}

void SwigDirector_swig_logger_base::on_send_inline(uint32_t action_id) {
  void * jaction_id  ;
  
  if (!swig_callbackon_send_inline) {
    swig_logger_base::on_send_inline(action_id);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    swig_callbackon_send_inline(jaction_id);
  }
}

void SwigDirector_swig_logger_base::on_send_context_free_inline(uint32_t action_id) {
  void * jaction_id  ;
  
  if (!swig_callbackon_send_context_free_inline) {
    swig_logger_base::on_send_context_free_inline(action_id);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    swig_callbackon_send_context_free_inline(jaction_id);
  }
}

void SwigDirector_swig_logger_base::on_cancel_deferred(__uint8_t qual, uint32_t action_id, uint64_t sender, uint8_t sender_id[], uint64_t payer, uint32_t published, uint32_t delay, uint32_t expiration, uint8_t trx_id[], uint8_t trx[]) {
  void * jqual  ;
  void * jaction_id  ;
  void * jsender  ;
  void * jsender_id  ;
  void * jpayer  ;
  void * jpublished  ;
  void * jdelay  ;
  void * jexpiration  ;
  void * jtrx_id  ;
  void * jtrx  ;
  
  if (!swig_callbackon_cancel_deferred) {
    swig_logger_base::on_cancel_deferred(qual,action_id,sender,sender_id,payer,published,delay,expiration,trx_id,trx);
    return;
  } else {
    jqual = (void *)new __uint8_t((const __uint8_t &)qual); 
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    jsender = (void *)new uint64_t((const uint64_t &)sender); 
    jsender_id = (void *) sender_id; 
    jpayer = (void *)new uint64_t((const uint64_t &)payer); 
    jpublished = (void *)new uint32_t((const uint32_t &)published); 
    jdelay = (void *)new uint32_t((const uint32_t &)delay); 
    jexpiration = (void *)new uint32_t((const uint32_t &)expiration); 
    jtrx_id = (void *) trx_id; 
    jtrx = (void *) trx; 
    swig_callbackon_cancel_deferred(jqual, jaction_id, jsender, jsender_id, jpayer, jpublished, jdelay, jexpiration, jtrx_id, jtrx);
  }
}

void SwigDirector_swig_logger_base::on_send_deferred(__uint8_t qual, uint32_t action_id, uint64_t sender, uint8_t sender_id[], uint64_t payer, uint32_t published, uint32_t delay, uint32_t expiration, uint8_t trx_id[], uint8_t trx[]) {
  void * jqual  ;
  void * jaction_id  ;
  void * jsender  ;
  void * jsender_id  ;
  void * jpayer  ;
  void * jpublished  ;
  void * jdelay  ;
  void * jexpiration  ;
  void * jtrx_id  ;
  void * jtrx  ;
  
  if (!swig_callbackon_send_deferred) {
    swig_logger_base::on_send_deferred(qual,action_id,sender,sender_id,payer,published,delay,expiration,trx_id,trx);
    return;
  } else {
    jqual = (void *)new __uint8_t((const __uint8_t &)qual); 
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    jsender = (void *)new uint64_t((const uint64_t &)sender); 
    jsender_id = (void *) sender_id; 
    jpayer = (void *)new uint64_t((const uint64_t &)payer); 
    jpublished = (void *)new uint32_t((const uint32_t &)published); 
    jdelay = (void *)new uint32_t((const uint32_t &)delay); 
    jexpiration = (void *)new uint32_t((const uint32_t &)expiration); 
    jtrx_id = (void *) trx_id; 
    jtrx = (void *) trx; 
    swig_callbackon_send_deferred(jqual, jaction_id, jsender, jsender_id, jpayer, jpublished, jdelay, jexpiration, jtrx_id, jtrx);
  }
}

void SwigDirector_swig_logger_base::on_create_deferred(__uint8_t qual, uint32_t action_id, uint64_t sender, uint8_t sender_id[], uint64_t payer, uint32_t published, uint32_t delay, uint32_t expiration, uint8_t trx_id[], uint8_t trx[]) {
  void * jqual  ;
  void * jaction_id  ;
  void * jsender  ;
  void * jsender_id  ;
  void * jpayer  ;
  void * jpublished  ;
  void * jdelay  ;
  void * jexpiration  ;
  void * jtrx_id  ;
  void * jtrx  ;
  
  if (!swig_callbackon_create_deferred) {
    swig_logger_base::on_create_deferred(qual,action_id,sender,sender_id,payer,published,delay,expiration,trx_id,trx);
    return;
  } else {
    jqual = (void *)new __uint8_t((const __uint8_t &)qual); 
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    jsender = (void *)new uint64_t((const uint64_t &)sender); 
    jsender_id = (void *) sender_id; 
    jpayer = (void *)new uint64_t((const uint64_t &)payer); 
    jpublished = (void *)new uint32_t((const uint32_t &)published); 
    jdelay = (void *)new uint32_t((const uint32_t &)delay); 
    jexpiration = (void *)new uint32_t((const uint32_t &)expiration); 
    jtrx_id = (void *) trx_id; 
    jtrx = (void *) trx; 
    swig_callbackon_create_deferred(jqual, jaction_id, jsender, jsender_id, jpayer, jpublished, jdelay, jexpiration, jtrx_id, jtrx);
  }
}

void SwigDirector_swig_logger_base::on_fail_deferred(uint32_t action_id) {
  void * jaction_id  ;
  
  if (!swig_callbackon_fail_deferred) {
    swig_logger_base::on_fail_deferred(action_id);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    swig_callbackon_fail_deferred(jaction_id);
  }
}

void SwigDirector_swig_logger_base::on_create_table(uint32_t action_id, uint64_t code, uint64_t scope, uint64_t table, uint64_t payer) {
  void * jaction_id  ;
  void * jcode  ;
  void * jscope  ;
  void * jtable  ;
  void * jpayer  ;
  
  if (!swig_callbackon_create_table) {
    swig_logger_base::on_create_table(action_id,code,scope,table,payer);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    jcode = (void *)new uint64_t((const uint64_t &)code); 
    jscope = (void *)new uint64_t((const uint64_t &)scope); 
    jtable = (void *)new uint64_t((const uint64_t &)table); 
    jpayer = (void *)new uint64_t((const uint64_t &)payer); 
    swig_callbackon_create_table(jaction_id, jcode, jscope, jtable, jpayer);
  }
}

void SwigDirector_swig_logger_base::on_remove_table(uint32_t action_id, uint64_t code, uint64_t scope, uint64_t table, uint64_t payer) {
  void * jaction_id  ;
  void * jcode  ;
  void * jscope  ;
  void * jtable  ;
  void * jpayer  ;
  
  if (!swig_callbackon_remove_table) {
    swig_logger_base::on_remove_table(action_id,code,scope,table,payer);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    jcode = (void *)new uint64_t((const uint64_t &)code); 
    jscope = (void *)new uint64_t((const uint64_t &)scope); 
    jtable = (void *)new uint64_t((const uint64_t &)table); 
    jpayer = (void *)new uint64_t((const uint64_t &)payer); 
    swig_callbackon_remove_table(jaction_id, jcode, jscope, jtable, jpayer);
  }
}

void SwigDirector_swig_logger_base::on_db_store_i64(uint32_t action_id, uint64_t payer, uint64_t table_code, uint64_t scope, uint64_t table_name, uint64_t primkey, uint8_t ndata[]) {
  void * jaction_id  ;
  void * jpayer  ;
  void * jtable_code  ;
  void * jscope  ;
  void * jtable_name  ;
  void * jprimkey  ;
  void * jndata  ;
  
  if (!swig_callbackon_db_store_i64) {
    swig_logger_base::on_db_store_i64(action_id,payer,table_code,scope,table_name,primkey,ndata);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    jpayer = (void *)new uint64_t((const uint64_t &)payer); 
    jtable_code = (void *)new uint64_t((const uint64_t &)table_code); 
    jscope = (void *)new uint64_t((const uint64_t &)scope); 
    jtable_name = (void *)new uint64_t((const uint64_t &)table_name); 
    jprimkey = (void *)new uint64_t((const uint64_t &)primkey); 
    jndata = (void *) ndata; 
    swig_callbackon_db_store_i64(jaction_id, jpayer, jtable_code, jscope, jtable_name, jprimkey, jndata);
  }
}

void SwigDirector_swig_logger_base::on_db_update_i64(uint32_t action_id, uint64_t payer, uint64_t table_code, uint64_t scope, uint64_t table_name, uint64_t primkey, uint8_t odata[], uint8_t ndata[]) {
  void * jaction_id  ;
  void * jpayer  ;
  void * jtable_code  ;
  void * jscope  ;
  void * jtable_name  ;
  void * jprimkey  ;
  void * jodata  ;
  void * jndata  ;
  
  if (!swig_callbackon_db_update_i64) {
    swig_logger_base::on_db_update_i64(action_id,payer,table_code,scope,table_name,primkey,odata,ndata);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    jpayer = (void *)new uint64_t((const uint64_t &)payer); 
    jtable_code = (void *)new uint64_t((const uint64_t &)table_code); 
    jscope = (void *)new uint64_t((const uint64_t &)scope); 
    jtable_name = (void *)new uint64_t((const uint64_t &)table_name); 
    jprimkey = (void *)new uint64_t((const uint64_t &)primkey); 
    jodata = (void *) odata; 
    jndata = (void *) ndata; 
    swig_callbackon_db_update_i64(jaction_id, jpayer, jtable_code, jscope, jtable_name, jprimkey, jodata, jndata);
  }
}

void SwigDirector_swig_logger_base::on_db_remove_i64(uint32_t action_id, uint64_t payer, uint64_t table_code, uint64_t scope, uint64_t table_name, uint64_t primkey, uint8_t odata[]) {
  void * jaction_id  ;
  void * jpayer  ;
  void * jtable_code  ;
  void * jscope  ;
  void * jtable_name  ;
  void * jprimkey  ;
  void * jodata  ;
  
  if (!swig_callbackon_db_remove_i64) {
    swig_logger_base::on_db_remove_i64(action_id,payer,table_code,scope,table_name,primkey,odata);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    jpayer = (void *)new uint64_t((const uint64_t &)payer); 
    jtable_code = (void *)new uint64_t((const uint64_t &)table_code); 
    jscope = (void *)new uint64_t((const uint64_t &)scope); 
    jtable_name = (void *)new uint64_t((const uint64_t &)table_name); 
    jprimkey = (void *)new uint64_t((const uint64_t &)primkey); 
    jodata = (void *) odata; 
    swig_callbackon_db_remove_i64(jaction_id, jpayer, jtable_code, jscope, jtable_name, jprimkey, jodata);
  }
}

void SwigDirector_swig_logger_base::on_ram_event(uint32_t action_id, std::basic_string< char > event_id, std::basic_string< char > family, std::basic_string< char > operation, std::basic_string< char > legacy_tag, uint64_t payer, uint64_t new_usage, int64_t delta) {
  void * jaction_id  ;
  void * jevent_id  ;
  void * jfamily  ;
  void * joperation  ;
  void * jlegacy_tag  ;
  void * jpayer  ;
  void * jnew_usage  ;
  void * jdelta  ;
  
  if (!swig_callbackon_ram_event) {
    swig_logger_base::on_ram_event(action_id,event_id,family,operation,legacy_tag,payer,new_usage,delta);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    jevent_id = (void *)new std::basic_string< char >((const std::basic_string< char > &)event_id); 
    jfamily = (void *)new std::basic_string< char >((const std::basic_string< char > &)family); 
    joperation = (void *)new std::basic_string< char >((const std::basic_string< char > &)operation); 
    jlegacy_tag = (void *)new std::basic_string< char >((const std::basic_string< char > &)legacy_tag); 
    jpayer = (void *)new uint64_t((const uint64_t &)payer); 
    jnew_usage = (void *)new uint64_t((const uint64_t &)new_usage); 
    jdelta = (void *)new int64_t((const int64_t &)delta); 
    swig_callbackon_ram_event(jaction_id, jevent_id, jfamily, joperation, jlegacy_tag, jpayer, jnew_usage, jdelta);
  }
}

void SwigDirector_swig_logger_base::on_create_permission(uint32_t action_id, int64_t permission_id, uint8_t data[]) {
  void * jaction_id  ;
  void * jpermission_id  ;
  void * jdata  ;
  
  if (!swig_callbackon_create_permission) {
    swig_logger_base::on_create_permission(action_id,permission_id,data);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    jpermission_id = (void *)new int64_t((const int64_t &)permission_id); 
    jdata = (void *) data; 
    swig_callbackon_create_permission(jaction_id, jpermission_id, jdata);
  }
}

void SwigDirector_swig_logger_base::on_modify_permission(uint32_t action_id, int64_t permission_id, uint8_t opdata[], uint8_t npdata[]) {
  void * jaction_id  ;
  void * jpermission_id  ;
  void * jopdata  ;
  void * jnpdata  ;
  
  if (!swig_callbackon_modify_permission) {
    swig_logger_base::on_modify_permission(action_id,permission_id,opdata,npdata);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    jpermission_id = (void *)new int64_t((const int64_t &)permission_id); 
    jopdata = (void *) opdata; 
    jnpdata = (void *) npdata; 
    swig_callbackon_modify_permission(jaction_id, jpermission_id, jopdata, jnpdata);
  }
}

void SwigDirector_swig_logger_base::on_remove_permission(uint32_t action_id, int64_t permission_id, uint8_t data[]) {
  void * jaction_id  ;
  void * jpermission_id  ;
  void * jdata  ;
  
  if (!swig_callbackon_remove_permission) {
    swig_logger_base::on_remove_permission(action_id,permission_id,data);
    return;
  } else {
    jaction_id = (void *)new uint32_t((const uint32_t &)action_id); 
    jpermission_id = (void *)new int64_t((const int64_t &)permission_id); 
    jdata = (void *) data; 
    swig_callbackon_remove_permission(jaction_id, jpermission_id, jdata);
  }
}

void SwigDirector_swig_logger_base::swig_connect_director(SWIG_Callback0_t callbackon_deep_mind_version, SWIG_Callback1_t callbackon_abidump_start, SWIG_Callback2_t callbackon_abidump_abi, SWIG_Callback3_t callbackon_abidump_end, SWIG_Callback4_t callbackon_start_block, SWIG_Callback5_t callbackon_accepted_block, SWIG_Callback6_t callbackon_switch_forks, SWIG_Callback7_t callbackon_error, SWIG_Callback8_t callbackon_onblock, SWIG_Callback9_t callbackon_applied_transaction, SWIG_Callback10_t callbackon_add_ram_correction, SWIG_Callback11_t callbackon_input_action, SWIG_Callback12_t callbackon_require_recipient, SWIG_Callback13_t callbackon_send_inline, SWIG_Callback14_t callbackon_send_context_free_inline, SWIG_Callback15_t callbackon_cancel_deferred, SWIG_Callback16_t callbackon_send_deferred, SWIG_Callback17_t callbackon_create_deferred, SWIG_Callback18_t callbackon_fail_deferred, SWIG_Callback19_t callbackon_create_table, SWIG_Callback20_t callbackon_remove_table, SWIG_Callback21_t callbackon_db_store_i64, SWIG_Callback22_t callbackon_db_update_i64, SWIG_Callback23_t callbackon_db_remove_i64, SWIG_Callback24_t callbackon_ram_event, SWIG_Callback25_t callbackon_create_permission, SWIG_Callback26_t callbackon_modify_permission, SWIG_Callback27_t callbackon_remove_permission) {
  swig_callbackon_deep_mind_version = callbackon_deep_mind_version;
  swig_callbackon_abidump_start = callbackon_abidump_start;
  swig_callbackon_abidump_abi = callbackon_abidump_abi;
  swig_callbackon_abidump_end = callbackon_abidump_end;
  swig_callbackon_start_block = callbackon_start_block;
  swig_callbackon_accepted_block = callbackon_accepted_block;
  swig_callbackon_switch_forks = callbackon_switch_forks;
  swig_callbackon_error = callbackon_error;
  swig_callbackon_onblock = callbackon_onblock;
  swig_callbackon_applied_transaction = callbackon_applied_transaction;
  swig_callbackon_add_ram_correction = callbackon_add_ram_correction;
  swig_callbackon_input_action = callbackon_input_action;
  swig_callbackon_require_recipient = callbackon_require_recipient;
  swig_callbackon_send_inline = callbackon_send_inline;
  swig_callbackon_send_context_free_inline = callbackon_send_context_free_inline;
  swig_callbackon_cancel_deferred = callbackon_cancel_deferred;
  swig_callbackon_send_deferred = callbackon_send_deferred;
  swig_callbackon_create_deferred = callbackon_create_deferred;
  swig_callbackon_fail_deferred = callbackon_fail_deferred;
  swig_callbackon_create_table = callbackon_create_table;
  swig_callbackon_remove_table = callbackon_remove_table;
  swig_callbackon_db_store_i64 = callbackon_db_store_i64;
  swig_callbackon_db_update_i64 = callbackon_db_update_i64;
  swig_callbackon_db_remove_i64 = callbackon_db_remove_i64;
  swig_callbackon_ram_event = callbackon_ram_event;
  swig_callbackon_create_permission = callbackon_create_permission;
  swig_callbackon_modify_permission = callbackon_modify_permission;
  swig_callbackon_remove_permission = callbackon_remove_permission;
}

void SwigDirector_swig_logger_base::swig_init_callbacks() {
  swig_callbackon_deep_mind_version = 0;
  swig_callbackon_abidump_start = 0;
  swig_callbackon_abidump_abi = 0;
  swig_callbackon_abidump_end = 0;
  swig_callbackon_start_block = 0;
  swig_callbackon_accepted_block = 0;
  swig_callbackon_switch_forks = 0;
  swig_callbackon_error = 0;
  swig_callbackon_onblock = 0;
  swig_callbackon_applied_transaction = 0;
  swig_callbackon_add_ram_correction = 0;
  swig_callbackon_input_action = 0;
  swig_callbackon_require_recipient = 0;
  swig_callbackon_send_inline = 0;
  swig_callbackon_send_context_free_inline = 0;
  swig_callbackon_cancel_deferred = 0;
  swig_callbackon_send_deferred = 0;
  swig_callbackon_create_deferred = 0;
  swig_callbackon_fail_deferred = 0;
  swig_callbackon_create_table = 0;
  swig_callbackon_remove_table = 0;
  swig_callbackon_db_store_i64 = 0;
  swig_callbackon_db_update_i64 = 0;
  swig_callbackon_db_remove_i64 = 0;
  swig_callbackon_ram_event = 0;
  swig_callbackon_create_permission = 0;
  swig_callbackon_modify_permission = 0;
  swig_callbackon_remove_permission = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_delete_swig_logger_base(void * jarg1) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_deep_mind_version(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  std::string arg2 ;
  uint arg3 ;
  uint arg4 ;
  std::string const *argp2 ;
  uint const *argp3 ;
  uint const *argp4 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (std::string *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string const", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint const", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint const", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->on_deep_mind_version(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_deep_mind_versionSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  std::string arg2 ;
  uint arg3 ;
  uint arg4 ;
  std::string const *argp2 ;
  uint const *argp3 ;
  uint const *argp4 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (std::string *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string const", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint const", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint const", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->swig_logger_base::on_deep_mind_version(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_abidump_start(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint32_t *argp2 ;
  uint64_t *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->on_abidump_start(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_abidump_startSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint32_t *argp2 ;
  uint64_t *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->swig_logger_base::on_abidump_start(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_abidump_abi(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint64_t arg2 ;
  uint8_t *arg3 ;
  uint64_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint64_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t *)jarg3; 
  (arg1)->on_abidump_abi(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_abidump_abiSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint64_t arg2 ;
  uint8_t *arg3 ;
  uint64_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint64_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t *)jarg3; 
  (arg1)->swig_logger_base::on_abidump_abi(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_abidump_end(void * jarg1) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  (arg1)->on_abidump_end();
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_abidump_endSwigExplicitswig_logger_base(void * jarg1) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  (arg1)->swig_logger_base::on_abidump_end();
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_start_block(void * jarg1, void * jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_start_block(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_start_blockSwigExplicitswig_logger_base(void * jarg1, void * jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->swig_logger_base::on_start_block(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_accepted_block(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint8_t *arg3 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t *)jarg3; 
  (arg1)->on_accepted_block(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_accepted_blockSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint8_t *arg3 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t *)jarg3; 
  (arg1)->swig_logger_base::on_accepted_block(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_switch_forks(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint8_t *arg2 ;
  uint8_t *arg3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (uint8_t *)jarg3; 
  (arg1)->on_switch_forks(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_switch_forksSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint8_t *arg2 ;
  uint8_t *arg3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (uint8_t *)jarg3; 
  (arg1)->swig_logger_base::on_switch_forks(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_error(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint8_t *arg2 ;
  uint8_t *arg3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (uint8_t *)jarg3; 
  (arg1)->on_error(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_errorSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint8_t *arg2 ;
  uint8_t *arg3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (uint8_t *)jarg3; 
  (arg1)->swig_logger_base::on_error(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_onblock(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint8_t *arg2 ;
  uint8_t *arg3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (uint8_t *)jarg3; 
  (arg1)->on_onblock(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_onblockSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint8_t *arg2 ;
  uint8_t *arg3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (uint8_t *)jarg3; 
  (arg1)->swig_logger_base::on_onblock(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_applied_transaction(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint8_t *arg3 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t *)jarg3; 
  (arg1)->on_applied_transaction(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_applied_transactionSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint8_t *arg3 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t *)jarg3; 
  (arg1)->swig_logger_base::on_applied_transaction(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_add_ram_correction(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  std::string arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint32_t *argp2 ;
  int64_t *argp3 ;
  std::string *argp4 ;
  uint64_t *argp5 ;
  uint64_t *argp6 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (int64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (std::string *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (uint64_t *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->on_add_ram_correction(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_add_ram_correctionSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  std::string arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint32_t *argp2 ;
  int64_t *argp3 ;
  std::string *argp4 ;
  uint64_t *argp5 ;
  uint64_t *argp6 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (int64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (std::string *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (uint64_t *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->swig_logger_base::on_add_ram_correction(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_input_action(void * jarg1, void * jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_input_action(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_input_actionSwigExplicitswig_logger_base(void * jarg1, void * jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->swig_logger_base::on_input_action(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_require_recipient(void * jarg1, void * jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_require_recipient(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_require_recipientSwigExplicitswig_logger_base(void * jarg1, void * jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->swig_logger_base::on_require_recipient(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_send_inline(void * jarg1, void * jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_send_inline(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_send_inlineSwigExplicitswig_logger_base(void * jarg1, void * jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->swig_logger_base::on_send_inline(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_send_context_free_inline(void * jarg1, void * jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_send_context_free_inline(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_send_context_free_inlineSwigExplicitswig_logger_base(void * jarg1, void * jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->swig_logger_base::on_send_context_free_inline(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_cancel_deferred(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  __uint8_t arg2 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  uint8_t *arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint32_t arg8 ;
  uint32_t arg9 ;
  uint8_t *arg10 ;
  uint8_t *arg11 ;
  __uint8_t *argp2 ;
  uint32_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp6 ;
  uint32_t *argp7 ;
  uint32_t *argp8 ;
  uint32_t *argp9 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (__uint8_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null __uint8_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint8_t *)jarg5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (uint32_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg7 = *argp7; 
  argp8 = (uint32_t *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg8 = *argp8; 
  argp9 = (uint32_t *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg9 = *argp9; 
  arg10 = (uint8_t *)jarg10; 
  arg11 = (uint8_t *)jarg11; 
  (arg1)->on_cancel_deferred(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_cancel_deferredSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  __uint8_t arg2 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  uint8_t *arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint32_t arg8 ;
  uint32_t arg9 ;
  uint8_t *arg10 ;
  uint8_t *arg11 ;
  __uint8_t *argp2 ;
  uint32_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp6 ;
  uint32_t *argp7 ;
  uint32_t *argp8 ;
  uint32_t *argp9 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (__uint8_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null __uint8_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint8_t *)jarg5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (uint32_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg7 = *argp7; 
  argp8 = (uint32_t *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg8 = *argp8; 
  argp9 = (uint32_t *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg9 = *argp9; 
  arg10 = (uint8_t *)jarg10; 
  arg11 = (uint8_t *)jarg11; 
  (arg1)->swig_logger_base::on_cancel_deferred(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_send_deferred(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  __uint8_t arg2 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  uint8_t *arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint32_t arg8 ;
  uint32_t arg9 ;
  uint8_t *arg10 ;
  uint8_t *arg11 ;
  __uint8_t *argp2 ;
  uint32_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp6 ;
  uint32_t *argp7 ;
  uint32_t *argp8 ;
  uint32_t *argp9 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (__uint8_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null __uint8_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint8_t *)jarg5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (uint32_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg7 = *argp7; 
  argp8 = (uint32_t *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg8 = *argp8; 
  argp9 = (uint32_t *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg9 = *argp9; 
  arg10 = (uint8_t *)jarg10; 
  arg11 = (uint8_t *)jarg11; 
  (arg1)->on_send_deferred(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_send_deferredSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  __uint8_t arg2 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  uint8_t *arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint32_t arg8 ;
  uint32_t arg9 ;
  uint8_t *arg10 ;
  uint8_t *arg11 ;
  __uint8_t *argp2 ;
  uint32_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp6 ;
  uint32_t *argp7 ;
  uint32_t *argp8 ;
  uint32_t *argp9 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (__uint8_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null __uint8_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint8_t *)jarg5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (uint32_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg7 = *argp7; 
  argp8 = (uint32_t *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg8 = *argp8; 
  argp9 = (uint32_t *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg9 = *argp9; 
  arg10 = (uint8_t *)jarg10; 
  arg11 = (uint8_t *)jarg11; 
  (arg1)->swig_logger_base::on_send_deferred(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_create_deferred(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  __uint8_t arg2 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  uint8_t *arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint32_t arg8 ;
  uint32_t arg9 ;
  uint8_t *arg10 ;
  uint8_t *arg11 ;
  __uint8_t *argp2 ;
  uint32_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp6 ;
  uint32_t *argp7 ;
  uint32_t *argp8 ;
  uint32_t *argp9 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (__uint8_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null __uint8_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint8_t *)jarg5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (uint32_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg7 = *argp7; 
  argp8 = (uint32_t *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg8 = *argp8; 
  argp9 = (uint32_t *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg9 = *argp9; 
  arg10 = (uint8_t *)jarg10; 
  arg11 = (uint8_t *)jarg11; 
  (arg1)->on_create_deferred(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_create_deferredSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  __uint8_t arg2 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  uint8_t *arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint32_t arg8 ;
  uint32_t arg9 ;
  uint8_t *arg10 ;
  uint8_t *arg11 ;
  __uint8_t *argp2 ;
  uint32_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp6 ;
  uint32_t *argp7 ;
  uint32_t *argp8 ;
  uint32_t *argp9 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (__uint8_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null __uint8_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint8_t *)jarg5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (uint32_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg7 = *argp7; 
  argp8 = (uint32_t *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg8 = *argp8; 
  argp9 = (uint32_t *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg9 = *argp9; 
  arg10 = (uint8_t *)jarg10; 
  arg11 = (uint8_t *)jarg11; 
  (arg1)->swig_logger_base::on_create_deferred(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_fail_deferred(void * jarg1, void * jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_fail_deferred(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_fail_deferredSwigExplicitswig_logger_base(void * jarg1, void * jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->swig_logger_base::on_fail_deferred(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_create_table(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint32_t *argp2 ;
  uint64_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp5 ;
  uint64_t *argp6 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (uint64_t *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->on_create_table(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_create_tableSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint32_t *argp2 ;
  uint64_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp5 ;
  uint64_t *argp6 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (uint64_t *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->swig_logger_base::on_create_table(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_remove_table(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint32_t *argp2 ;
  uint64_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp5 ;
  uint64_t *argp6 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (uint64_t *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->on_remove_table(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_remove_tableSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint32_t *argp2 ;
  uint64_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp5 ;
  uint64_t *argp6 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (uint64_t *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->swig_logger_base::on_remove_table(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_db_store_i64(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint64_t arg7 ;
  uint8_t *arg8 ;
  uint32_t *argp2 ;
  uint64_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp5 ;
  uint64_t *argp6 ;
  uint64_t *argp7 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (uint64_t *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (uint64_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg7 = *argp7; 
  arg8 = (uint8_t *)jarg8; 
  (arg1)->on_db_store_i64(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_db_store_i64SwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint64_t arg7 ;
  uint8_t *arg8 ;
  uint32_t *argp2 ;
  uint64_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp5 ;
  uint64_t *argp6 ;
  uint64_t *argp7 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (uint64_t *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (uint64_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg7 = *argp7; 
  arg8 = (uint8_t *)jarg8; 
  (arg1)->swig_logger_base::on_db_store_i64(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_db_update_i64(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint64_t arg7 ;
  uint8_t *arg8 ;
  uint8_t *arg9 ;
  uint32_t *argp2 ;
  uint64_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp5 ;
  uint64_t *argp6 ;
  uint64_t *argp7 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (uint64_t *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (uint64_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg7 = *argp7; 
  arg8 = (uint8_t *)jarg8; 
  arg9 = (uint8_t *)jarg9; 
  (arg1)->on_db_update_i64(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_db_update_i64SwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint64_t arg7 ;
  uint8_t *arg8 ;
  uint8_t *arg9 ;
  uint32_t *argp2 ;
  uint64_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp5 ;
  uint64_t *argp6 ;
  uint64_t *argp7 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (uint64_t *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (uint64_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg7 = *argp7; 
  arg8 = (uint8_t *)jarg8; 
  arg9 = (uint8_t *)jarg9; 
  (arg1)->swig_logger_base::on_db_update_i64(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_db_remove_i64(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint64_t arg7 ;
  uint8_t *arg8 ;
  uint32_t *argp2 ;
  uint64_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp5 ;
  uint64_t *argp6 ;
  uint64_t *argp7 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (uint64_t *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (uint64_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg7 = *argp7; 
  arg8 = (uint8_t *)jarg8; 
  (arg1)->on_db_remove_i64(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_db_remove_i64SwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint64_t arg7 ;
  uint8_t *arg8 ;
  uint32_t *argp2 ;
  uint64_t *argp3 ;
  uint64_t *argp4 ;
  uint64_t *argp5 ;
  uint64_t *argp6 ;
  uint64_t *argp7 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (uint64_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (uint64_t *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (uint64_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (uint64_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg7 = *argp7; 
  arg8 = (uint8_t *)jarg8; 
  (arg1)->swig_logger_base::on_db_remove_i64(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_ram_event(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  std::basic_string< char > arg3 ;
  std::basic_string< char > arg4 ;
  std::basic_string< char > arg5 ;
  std::basic_string< char > arg6 ;
  uint64_t arg7 ;
  uint64_t arg8 ;
  int64_t arg9 ;
  uint32_t *argp2 ;
  std::basic_string< char > *argp3 ;
  std::basic_string< char > *argp4 ;
  std::basic_string< char > *argp5 ;
  std::basic_string< char > *argp6 ;
  uint64_t *argp7 ;
  uint64_t *argp8 ;
  int64_t *argp9 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (std::basic_string< char > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::basic_string< char >", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (std::basic_string< char > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::basic_string< char >", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (std::basic_string< char > *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::basic_string< char >", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (std::basic_string< char > *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::basic_string< char >", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (uint64_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg7 = *argp7; 
  argp8 = (uint64_t *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg8 = *argp8; 
  argp9 = (int64_t *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg9 = *argp9; 
  (arg1)->on_ram_event(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_ram_eventSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  std::basic_string< char > arg3 ;
  std::basic_string< char > arg4 ;
  std::basic_string< char > arg5 ;
  std::basic_string< char > arg6 ;
  uint64_t arg7 ;
  uint64_t arg8 ;
  int64_t arg9 ;
  uint32_t *argp2 ;
  std::basic_string< char > *argp3 ;
  std::basic_string< char > *argp4 ;
  std::basic_string< char > *argp5 ;
  std::basic_string< char > *argp6 ;
  uint64_t *argp7 ;
  uint64_t *argp8 ;
  int64_t *argp9 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (std::basic_string< char > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::basic_string< char >", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (std::basic_string< char > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::basic_string< char >", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (std::basic_string< char > *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::basic_string< char >", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (std::basic_string< char > *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::basic_string< char >", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (uint64_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg7 = *argp7; 
  argp8 = (uint64_t *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg8 = *argp8; 
  argp9 = (int64_t *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg9 = *argp9; 
  (arg1)->swig_logger_base::on_ram_event(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_create_permission(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  uint8_t *arg4 ;
  uint32_t *argp2 ;
  int64_t *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (int64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (uint8_t *)jarg4; 
  (arg1)->on_create_permission(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_create_permissionSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  uint8_t *arg4 ;
  uint32_t *argp2 ;
  int64_t *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (int64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (uint8_t *)jarg4; 
  (arg1)->swig_logger_base::on_create_permission(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_modify_permission(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  uint8_t *arg4 ;
  uint8_t *arg5 ;
  uint32_t *argp2 ;
  int64_t *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (int64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (uint8_t *)jarg4; 
  arg5 = (uint8_t *)jarg5; 
  (arg1)->on_modify_permission(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_modify_permissionSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  uint8_t *arg4 ;
  uint8_t *arg5 ;
  uint32_t *argp2 ;
  int64_t *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (int64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (uint8_t *)jarg4; 
  arg5 = (uint8_t *)jarg5; 
  (arg1)->swig_logger_base::on_modify_permission(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_remove_permission(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  uint8_t *arg4 ;
  uint32_t *argp2 ;
  int64_t *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (int64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (uint8_t *)jarg4; 
  (arg1)->on_remove_permission(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_on_remove_permissionSwigExplicitswig_logger_base(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  uint8_t *arg4 ;
  uint32_t *argp2 ;
  int64_t *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (int64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (uint8_t *)jarg4; 
  (arg1)->swig_logger_base::on_remove_permission(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_swig_logger_base() {
  void * jresult ;
  swig_logger_base *result = 0 ;
  
  result = (swig_logger_base *)new SwigDirector_swig_logger_base();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_swig_logger_base_director_connect(void *objarg, SwigDirector_swig_logger_base::SWIG_Callback0_t callback0, SwigDirector_swig_logger_base::SWIG_Callback1_t callback1, SwigDirector_swig_logger_base::SWIG_Callback2_t callback2, SwigDirector_swig_logger_base::SWIG_Callback3_t callback3, SwigDirector_swig_logger_base::SWIG_Callback4_t callback4, SwigDirector_swig_logger_base::SWIG_Callback5_t callback5, SwigDirector_swig_logger_base::SWIG_Callback6_t callback6, SwigDirector_swig_logger_base::SWIG_Callback7_t callback7, SwigDirector_swig_logger_base::SWIG_Callback8_t callback8, SwigDirector_swig_logger_base::SWIG_Callback9_t callback9, SwigDirector_swig_logger_base::SWIG_Callback10_t callback10, SwigDirector_swig_logger_base::SWIG_Callback11_t callback11, SwigDirector_swig_logger_base::SWIG_Callback12_t callback12, SwigDirector_swig_logger_base::SWIG_Callback13_t callback13, SwigDirector_swig_logger_base::SWIG_Callback14_t callback14, SwigDirector_swig_logger_base::SWIG_Callback15_t callback15, SwigDirector_swig_logger_base::SWIG_Callback16_t callback16, SwigDirector_swig_logger_base::SWIG_Callback17_t callback17, SwigDirector_swig_logger_base::SWIG_Callback18_t callback18, SwigDirector_swig_logger_base::SWIG_Callback19_t callback19, SwigDirector_swig_logger_base::SWIG_Callback20_t callback20, SwigDirector_swig_logger_base::SWIG_Callback21_t callback21, SwigDirector_swig_logger_base::SWIG_Callback22_t callback22, SwigDirector_swig_logger_base::SWIG_Callback23_t callback23, SwigDirector_swig_logger_base::SWIG_Callback24_t callback24, SwigDirector_swig_logger_base::SWIG_Callback25_t callback25, SwigDirector_swig_logger_base::SWIG_Callback26_t callback26, SwigDirector_swig_logger_base::SWIG_Callback27_t callback27) {
  swig_logger_base *obj = (swig_logger_base *)objarg;
  SwigDirector_swig_logger_base *director = static_cast<SwigDirector_swig_logger_base *>(obj);
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27);
}


#ifdef __cplusplus
}
#endif

